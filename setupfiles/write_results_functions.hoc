proc spikeout() {local i, rank  localobj f				// Write out a spike raster (cell, spike time)
	pc.barrier()									// Wait for all ranks to get to this point
	sprint(cmd,"./results/%s/spikeraster.dat", RunName)
	f = new File(cmd)
	if (pc.id == 0) { 								// Write header to file 1 time only
		f.wopen()
		f.close()
	}
	
	for rank = 0, pc.nhost-1 {				// For each processor, allow processor to append to file the spike times of its cells
		if (rank == pc.id) {				// Ensure that each processor runs once
			f.aopen() 						// Open for appending to file
			for i=0, pnm.idvec.size-1 {
				f.printf("%.3f %d\n", pnm.spikevec.x[i], pnm.idvec.x[i])	// Print the spike time and spiking cell gid
			}
			f.close()
		}
		pc.barrier()
	}
}


proc sumnumout() {local alltime, allct, allspk localobj f
	allct = pc.allreduce(nclist.count,1)
	allspk = pc.allreduce(pnm.idvec.size,1)
	comptime = pc.step_time
	avgcomp = pc.allreduce(comptime, 1)/pc.nhost
	maxcomp = pc.allreduce(comptime, 2)
	loadbal=1
	exchtime=0
	if (maxcomp>0) {
		loadbal=avgcomp/maxcomp
		exchtime= $1 - maxcomp
	}

	if (pc.id == 0) { 								// Write header to file 1 time only
		alltime = startsw() - loadstart
		sprint(cmd,"./results/%s/sumnumout.txt", RunName)
		f = new File(cmd)
		f.wopen()
		f.printf("NumCells = %g;\nNumSpikes = %g;\nNumConnections = %g;\nRunTime = %g;\nNumCellTypes = %g;\nLoadBalResult = %g;\nExchangeResult = %g;\n", ncell, allspk, allct, alltime, numCellTypes, loadbal, exchtime)	// Print the spike time and spiking cell gid
		f.close()
	}
}

proc timeout() {local i, rank, gid, srcid localobj tgt, f, cell// Write out runtimes for each processor
	pc.barrier()					// Wait for all ranks to get to this point
	sprint(cmd,"./results/%s/runtimes.dat", RunName)
	f = new File(cmd)
	if (pc.id == 0) { 				// Write header to file 1 time only
		f.wopen()
		f.printf("host\tset up\tcreated cells\tconnected cells\tran simulation\t\n")
		f.close()
	}
	
	for rank = 0, pc.nhost-1 {				// For each processor, allow processor to append its runtimes to file
		if (rank == pc.id) {				// Ensure that each processor runs once
			f.aopen() 						// Open for appending to file
			f.printf("%g\t%g\t%g\t%g\t%g\n", pc.id, loadtime, createtime, connecttime, runtime)
			f.close()
		}
		pc.barrier()
	}
}

