/************************************************************
This file is used to test the behavior of the 4 cell models
and record voltage traces/spike times

This will be used to ensure consistency of cell activity across
versions of NEURON & facilitate implementation of the cell models
in NeuroML
************************************************************/


loadstart = startsw()					// record the start time of the set up
/***********************************************************************************************
I.  LOAD LIBRARIES & PARAMETERS
***********************************************************************************************/
{load_file("nrngui.hoc")}				// Standard definitions - NEURON library file

{load_file("netparmpi.hoc")}			// Contains the template that defines the properties of
										//  the ParallelNetManager class, which is used to set
										//   up a network that runs on parallel processors
										
{load_file("./setupfiles/ranstream.hoc")}	// Contains the template that defines a RandomStream
											//  class used to produce random numbers
											// 	for the cell noise (what type of noise?)
											
{load_file("./setupfiles/CellCategoryInfo.hoc")}	// Contains the template that defines a 
													//  CellCategoryInfo class used to store
													// 	celltype-specific parameters
													
{load_file("./setupfiles/defaultvar.hoc")}	// Contains the proc definition for default_var proc

{load_file("./test/parameters-test.hoc")}	// Loads in operational and model parameters that can
											//  be changed at command line											
{load_file("./test/set_other_parameters.hoc")}// Loads in operational and model parameters
													//  that can't be changed at command line


/***********************************************************************************************
II. SET MODEL SIZE, CELL DEFINITIONS
***********************************************************************************************/
{load_file("./setupfiles/load_cell_category_info.hoc")}	// Reads the 'cells2include.hoc' file and
														//  loads the information into one
														//  'CellCategoryInfo' object for each cell
														//  type (bio or art cells?). Info includes
														//  number of cells, gid ranges, type name 

{load_file("./setupfiles/load_cell_conns.hoc")}	// Load in the cell connectivity info

strdef tempFileStr						// Define string reference for the names of the cell template files
proc loadCellTemplates(){local i		// Define one template for each cell type in cells2include, plus perforant path cell(s)
	for i=0, numCellTypes-1 {
		sprint(tempFileStr,"./cells/class_%s.hoc",cellType[i].cellType_string)
		load_file(tempFileStr)			// Load the cell type's class template
	}
}	

loadCellTemplates()

proc calcNetSize(){local i				// Calculate final network size after sclerosis
	totalCells = 0						// Initialize totalCells so we can add to it iteratively in the for loop

    /////////  Forcing one cell of every type!!!
    cellType[0].numCells = 1
    /////////


	ncell = cellType[0].numCells		// Initialize ncell so we can add to it iteratively in the for loop
	for i=1,numCellTypes-1 {			// Run the following code for non ppstim cell types only

        /////////  Forcing one cell of every type!!!
        cellType[i].numCells = 1  
        /////////

		cellType[i].updateGidRange(cellType[i-1].cellEndGid+1)	// Update the gid ranges for each cell type
		totalCells = totalCells + cellType[i].numCells			// Total number of cells after sclerosis, not including pp cells
		ncell = ncell + cellType[i].numCells 					// Total # cells including pp cells
	}
	random_stream_offset_= (totalCells*2+2)	// How far down the stream to start the next stream section -
											// 	must be higher than the length of each stream section, which
											// 	is the # of times this thing will be called per cell x random type
}
calcNetSize()

proc calcBinSize(){local NumGCells

	for i=0, numCellTypes-1 {		// Using the specified dimensions of the network (in um) and
									//  the total number of cells of each type, set the number
									//  of bins in X, Y, Z dimensions such that the cells will be
									//  evenly distributed throughout the allotted volume
									// just changed this so even the stim cells will be allotted, as now we have some
									// stimulation protocols that incorporate stim cell position
	
		cellType[i].setBins(LongitudinalLength,TransverseLength,LayerVector.x[cellType[i].layerflag])  
									// For the z length, use the height of the layer in which the
									// cell somata are found for this cell type
	}
}
calcBinSize()



/***********************************************************************************************
III.SET UP PARALLEL CAPABILITY
***********************************************************************************************/
objref pnm, pc, nc, nil
proc parallelizer() {
	pnm = new ParallelNetManager(ncell)	// Set up a parallel net manager for all the cells
	pc = pnm.pc
	pnm.round_robin()					// Incorporate all processors - cells 0 through ncell-1
										//	are distributed throughout the hosts
										//	(cell 0 goes to host 0, cell 1 to host 1, etc)
}
parallelizer()


iterator pcitr() {local i2, startgid	// Create iterator for use as a standard 'for' loop
										//  throughout given # cells usage:
										//  for pcitr(&i1, &i2, &gid, it_start, it_end) {do stuff}
										//  it_start and it_end let you define range over
										//  which to iterate
										//  i1 is the index of the cell on the cell list for that host
										//  i2 is the index of that cell for that cell type on that host
	numcycles = int($4/pc.nhost)
	extra = $4%pc.nhost
	addcycle=0
	if (extra>pc.id) {addcycle=1}
	startgid=(numcycles+addcycle)*pc.nhost+pc.id
	i1 = numcycles+addcycle // the index into the cell # on this host.
	i2 = 0 // the index of the cell in that cell type's list on that host
	if (startgid<=$5) {
		for (i3=startgid; i3 <= $5; i3 += pc.nhost) {	// Just iterate through the cells on
														//  this host(this simple statement
														//  iterates through all the cells on
														//  this host and only these cells because 
														//  the roundrobin call made earlier dealt
														//  the cells among the processors in an
														//  orderly manner (like a deck of cards)
				$&1 = i1
				$&2 = i2
				$&3 = i3
				iterator_statement
				i1 += 1
				i2 += 1
		}
	}
}


objref  strobj
strobj = new StringFunctions()
strdef direx
if (strcmp(UID,"0")==0 && pc.id==0) {
	type = unix_mac_pc() // 1 if unix, 2 if mac, 3 if mswin, or 4 if mac osx darwin
	if (type<3) {
		{system("uuidgen", direx)} // unix or mac
		strobj.left(direx, strobj.len(direx)-1)
	} else {
		{system("cscript //NoLogo setupfiles/uuid.vbs", direx)} // pc
	}
	UID = direx
}

{load_file("./setupfiles/save_run_info.hoc")}

loadtime = startsw() - loadstart		// Calculate the set up time (now - recorded start time) in seconds
if (pc.id == 0) {printf("\nTIME HOST 0: %g seconds (set up)\n************\n", loadtime)}
createstart = startsw()					// Record the start time of the cell creation
/***********************************************************************************************
IV. CREATE, UNIQUELY ID, AND POSITION CELLS
***********************************************************************************************/
strdef cmd
objref cells, ranconlist, ransynlist
cells = new List()						
ranconlist = new List()
ransynlist = new List()

{load_file("./setupfiles/position_functions.hoc")}	// Defines the algorithm used to set the
													//  positions of the cells
													
{load_file("./setupfiles/create_cells_pos.hoc")}	// Creates each cell on its assigned host
													//  and sets its position using the algorithm
													//  defined above

strdef cmd
{load_file("./setupfiles/write_positions.hoc")}		// Defines the proc to write the position

if (PrintCellPositions>0) {posout()}	// Calls the proc that writes the position of each cell to the

createtime = startsw() - createstart	// Calculate time taken to create the cells
if (pc.id == 0) {printf("\nTIME HOST 0: %g seconds (created cells)\n************\n", createtime)}
connectstart = startsw()				// Grab start time of cell connection


/***********************************************************************************************
Va.	ADD CURRENT CLAMP INPUT & record cells
***********************************************************************************************/

objectvar stims[numCellTypes]
objref record_v[numCellTypes]
objref file_v[numCellTypes]

objref record_t
objref file_t

points = tstop * steps_per_ms

record_t = new Vector()
record_t.record(&t)
record_t.resize(points)

for cellind=1, numCellTypes-1 {
    printf("\nAdding current clamp to %g (%s)", cellind, cellType[cellind].cellType_string)

    access cellType[cellind].CellList[0].soma
    stims[cellind] = new IClamp(0.5)
    stims[cellind].del = 200.0
    stims[cellind].dur = 600.0

    if (strcmp(cellType[cellind].cellType_string,"granulecell")==0) {
        stims[cellind].amp = 0.3
    } else if (strcmp(cellType[cellind].cellType_string,"mossycell")==0) {
        stims[cellind].amp = 0.36
    } else if (strcmp(cellType[cellind].cellType_string,"hippcell")==0) {
        stims[cellind].amp = 0.5
    } else if (strcmp(cellType[cellind].cellType_string,"basketcell")==0) {
        stims[cellind].amp = 0.5
    }

    record_v[cellind] = new Vector()
    record_v[cellind].record(&cellType[cellind].CellList[0].soma.v(0.5))
    record_v[cellind].resize(points)
    printf("\nRecording %g, %g points", cellind, points)

}



/***********************************************************************************************
VI.	INITIALIZE AND RUN NETWORK, OUTPUT RESULT FILES
***********************************************************************************************/


proc init() { local dtsav, temp, secsav, secondordersav	// initialize the simulation
	dtsav = dt						// Save desired dt value to reset after temporarily changing dt
	secondordersav = secondorder	// Save desired secondorder value to reset after temporarily changing secondorder

	finitialize(v_init)	// Call finitialize (since we are replacing the default init proc that calls this)
						// finitialize will Call the INITIAL block for all mechanisms and point processes inserted in the sections
						//	and set the initial voltage to v_init for all sections

	t = -500			// Set the start time for (pre) simulation; -500 to prepare network in advance of start at 0
	dt= 10				// Set dt to large value
	secondorder = 0		// Set secondorder to 0 to set the default fully implicit backward euler for numerical integration (see NEURON ref)

	temp= cvode.active()
	if (temp!=0) {cvode.active(0)}	// If cvode is on, turn off temporarily to do large fixed step
	// Now, do a large pre run from t = -500 to t = -100 to set the network 'settle' and all components to reach steady state
	while(t<-100) { fadvance() }	// Integrate all section equations over the interval dt. increment t by dt
															//	and repeat till t at -100
	if (temp!=0) {cvode.active(1)}	// If cvode was on and then turned off, turn it back on now
	
	t = tstart 						// Start time of the simulation
	dt = dtsav						// Reset dt to specified value
	secondorder = secondordersav	// Reset secondorder to specified value
	if (cvode.active()){
		cvode.re_init()				// If cvode is active, initialize the integrator
	} else {
		fcurrent()					// If cvode is not active, make all assigned variables (currents, conductances, etc)
									//	consistent with the values of the states
	}
}

proc rrun(){												// Run the network simulation

	runstart = startsw()							// grab start time of the simulation
	//pnm.want_all_spikes() 						// Record all spikes of all cells on this machine into the pnm.spikevec (spiketimes) and pnm.idvec (gids)
	//pc.set_maxstep(10)							// Set every machine's max step size to minimum delay of all netcons created on pc using pc.gid_connect, but not larger than 10

        printf("\nRunning for %g ms\n", tstop)
        stdinit()									// Call the init fcn (which is redefined in this code) and then make other standard calls (to stop watch, etc)
	//pc.psolve(tstop)							// Equivalent to calling cvode.solve(tstop), for parallel NEURON, where solve will be broken into steps determined by the result of set_maxstep
        

        //cvode.solve(tstop)
        run()

	printf("\nt: %g\n", t)
        runtime = startsw() - runstart				// Calculate runtime of simulation
	if (pc.id == 0) {printf("****\nTIME SUMMARY for host 0\nset up in %g seconds\ncreated cells in %g seconds\nconnected cells in %g seconds\nran simulation in %g seconds\n************\n", loadtime, createtime, 0, runtime)}
	spikeout()	// Write the file of spike times and spiking cells, "spikeraster.dat"
	timeout()	// Write out a file of run times for each code section

}
/**/proc spikeout() {local i, rank  localobj f				// Write out a spike raster (cell, spike time)
		pc.barrier()									// Wait for all ranks to get to this point
		f = new File("test/spikeraster.dat")
		if (pc.id == 0) { 								// Write header to file 1 time only
			f.wopen()
			f.close()
		}
		
		for rank = 0, pc.nhost-1 {				// For each processor, allow processor to append to file the positions of its cells
			if (rank == pc.id) {				// Ensure that each processor runs once
				f.aopen() 						// Open for appending to file
				for i=0, pnm.idvec.size-1 {
					f.printf("%.3f %d\n", pnm.spikevec.x[i], pnm.idvec.x[i])	// Print the spike time and spiking cell gid
				}
				f.close()
			}
			pc.barrier()
		}
	}

/**/proc timeout() {local i, rank, gid, srcid localobj tgt, f, cell// Write out the 3d position coordinates of each cell
		pc.barrier()					// Wait for all ranks to get to this point
		f = new File("test/runtimes.dat")
		if (pc.id == 0) { 				// Write header to file 1 time only
			f.wopen()
			f.printf("host\tset up\tcreated cells\tconnected cells\tran simulation\t\n")
			f.close()
		}
		
		for rank = 0, pc.nhost-1 {				// For each processor, allow processor to append its runtimes to file
			if (rank == pc.id) {				// Ensure that each processor runs once
				f.aopen() 						// Open for appending to file
				f.printf("%g\t%g\t%g\t%g\t%g\n", pc.id, loadtime, createtime, 0, runtime)
				f.close()
			}
			pc.barrier()
		}
	}

proc savetofile() {

    strdef filename
    for cellind=1, numCellTypes-1 {

        file_v[cellind] = new File()
        {sprint(filename, "test/test_%s.dat", cellType[cellind].cellType_string)}
        printf("Saving to %s\n", filename)


        file_v[cellind].wopen(filename)
        record_v[cellind].printf(file_v[cellind])
        file_v[cellind].close()
    }

    file_t = new File()
    sprint(filename, "test/time.dat")

    file_t.wopen(filename)
    record_t.printf(file_t)
    file_t.close()

}

rrun()	// Run the network simulation

savetofile()

quit()	// Quit the program when finished to return control to command line


