objref LayerVector, strobj
strdef cmdstr, layers, tmpstr

proc SetOtherParameters() {local ind, i, layernum, tempheight
	strobj = new StringFunctions()
	tmpstr = LayerHeights
	ind = strobj.substr(tmpstr,";")
	layers = tmpstr
	strobj.left(layers, ind)
	sscanf(layers,"%g", &layernum)
	{sprint(cmdstr, "LayerVector=new Vector(%g)",  layernum)} // List of Zo (starting height) values, 1 for each layer
	{execute1(cmdstr)}
	
	for i=0, layernum-1 {
		strobj.right(tmpstr, ind+1)
		ind = strobj.substr(tmpstr,";")
		layers = tmpstr
		strobj.left(layers, ind)
		sscanf(layers,"%g", &tempheight)
		LayerVector.x[i] = tempheight
	}

	randnet = 0		// If 0, decrease probability of self-connection based on sclerosis amount,
					// 	for cell types flagged as susceptible
	secondorder= 2	// A global variable which specifies the time integration method
					// 	(see NEURON reference)

	dentateBins = 100					// Equivalent subdivisions of the dentate
	dentateLength = 6000				// Length of dentate in microns
	dentateBinSize = int(dentateLength/dentateBins)	// Length of each bin (along x dimension) in microns

	axconvel = 250	// axonal conduction velocity in microns/ms (Bartos et al. 2002)

	tstart = 0		// Start time of simulation
	
	tstop = SimDuration	// End time of simulation
	
	dt = TemporalResolution		// Integration interval for fadvance (see NEURON reference)
	
	secondorder = 2	// A global variable which specifies the time integration method
					// 	(see NEURON reference)
					
	v_init = -60	// All voltages of all sections are initialized to this voltage (mV)
	
	N = 1			// Specifies step resolution (see NEURON reference for steps_per_ms),
					// 	sometimes 1, sometimes 4

	steps_per_ms = 1*N/(dt)		// Controls the intervals at which points are plotted
	
	noise_random_stream_offset_ = (tstop - tstart)/dt + 1	// Each noise generator picks a number every
															// 	dt for the full time range, so stream
															// 	sections must be at least this long to
															// 	prevent overlap
															
	//connectionFactor = 1 // Set factor to control # connections formed in the network;
						// 	changes depending on total # cells and model size (Scale)
	//if (Scale>=20) {connectionFactor = 1} //5}
	//if (Scale>=2000) {connectionFactor = 1} //500}
	
}	
SetOtherParameters()
